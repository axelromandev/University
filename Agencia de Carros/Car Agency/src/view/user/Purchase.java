/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.user;

import code.Files;
import code.MethodsSQL;
import java.awt.Component;
import java.io.File;
import java.text.DecimalFormat;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import view.Login;

/**
 *
 * @author Restf
 */
public class Purchase extends javax.swing.JFrame {

    MethodsSQL methodsSql = new MethodsSQL();
    Files file = new Files();
    Boolean checkCar1, checkCar2, checkCar3, checkCar4, checkPay1, checkPay2;
    int price;
    ImageIcon car  = new ImageIcon(getClass().getResource("/resource/car.png"));
    ImageIcon nissanWhite  = new ImageIcon(getClass().getResource("/resource/car-nissan-white.png"));
    ImageIcon nissanRed    = new ImageIcon(getClass().getResource("/resource/car-nissan-red.png"));
    ImageIcon nissanOrange = new ImageIcon(getClass().getResource("/resource/car-nissan-orage.png"));
    ImageIcon nissanYellow = new ImageIcon(getClass().getResource("/resource/car-nissan-yellow.png"));
    ImageIcon nissanGreen  = new ImageIcon(getClass().getResource("/resource/car-nissan-green.png"));
    ImageIcon nissanBlue   = new ImageIcon(getClass().getResource("/resource/car-nissan-blue.png"));
    ImageIcon nissanGray   = new ImageIcon(getClass().getResource("/resource/car-nissan-gray.png"));
    
    ImageIcon audiWhite  = new ImageIcon(getClass().getResource("/resource/car-audi-white.png"));
    ImageIcon audiRed    = new ImageIcon(getClass().getResource("/resource/car-audi-red.png"));
    ImageIcon audiOrange = new ImageIcon(getClass().getResource("/resource/car-audi-orage.png"));
    ImageIcon audiYellow = new ImageIcon(getClass().getResource("/resource/car-audi-yellow.png"));
    ImageIcon audiGreen  = new ImageIcon(getClass().getResource("/resource/car-audi-green.png"));
    ImageIcon audiBlue   = new ImageIcon(getClass().getResource("/resource/car-audi-blue.png"));
    ImageIcon audiGray   = new ImageIcon(getClass().getResource("/resource/car-audi-gray.png"));
    
    ImageIcon volkswagenWhite  = new ImageIcon(getClass().getResource("/resource/car-volkswagen-white.png"));
    ImageIcon volkswagenRed    = new ImageIcon(getClass().getResource("/resource/car-volkswagen-red.png"));
    ImageIcon volkswagenOrange = new ImageIcon(getClass().getResource("/resource/car-volkswagen-orage.png"));
    ImageIcon volkswagenYellow = new ImageIcon(getClass().getResource("/resource/car-volkswagen-yellow.png"));
    ImageIcon volkswagenGreen  = new ImageIcon(getClass().getResource("/resource/car-volkswagen-green.png"));
    ImageIcon volkswagenBlue   = new ImageIcon(getClass().getResource("/resource/car-volkswagen-blue.png"));
    ImageIcon volkswagenGray   = new ImageIcon(getClass().getResource("/resource/car-volkswagen-gray.png"));
    
    public Purchase() {
        initComponents();
        setTitle("Car Agency - Compra - [ "+Login.userEntity.getName()+" ]");
        setLocationRelativeTo(null);
        lockTypePaymentPanel();
        if(MenuUser.ReloadData){
            load();
        } else {
            selectColorsNew.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        selectCompany = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        selectState = new javax.swing.JComboBox<>();
        selectModel = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        selectSerial = new javax.swing.JComboBox<>();
        selectColors = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        selectColorsNew = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        txtPriceCar = new javax.swing.JLabel();
        txtExtra = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtPriceTotal = new javax.swing.JLabel();
        iconCar = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        selectTypePayment = new javax.swing.JComboBox<>();
        typePaymentPanel = new javax.swing.JPanel();
        txtCard = new javax.swing.JTextField();
        labelCar = new javax.swing.JLabel();
        txtCVV = new javax.swing.JTextField();
        labelCVV = new javax.swing.JLabel();
        labelMM = new javax.swing.JLabel();
        labelAA = new javax.swing.JLabel();
        txtMM = new javax.swing.JTextField();
        txtAA = new javax.swing.JTextField();
        txtPaypalEmail = new javax.swing.JTextField();
        labelPaypalEmail = new javax.swing.JLabel();
        labelPaypalPass = new javax.swing.JLabel();
        txtPaypalPass = new javax.swing.JPasswordField();
        btnPurchase = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(128, 153, 155));
        jPanel1.setForeground(new java.awt.Color(51, 51, 51));
        jPanel1.setAutoscrolls(true);
        jPanel1.setPreferredSize(new java.awt.Dimension(1280, 720));
        jPanel1.setLayout(null);

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/back.png"))); // NOI18N
        jLabel7.setText("VOLVER");
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel7);
        jLabel7.setBounds(1086, 6, 174, 72);

        selectCompany.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        selectCompany.setMaximumRowCount(4);
        selectCompany.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "• NISSAN", "• AUDI", "• VOLKSWAGEN" }));
        selectCompany.setPreferredSize(new java.awt.Dimension(220, 40));
        selectCompany.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCompanyActionPerformed(evt);
            }
        });
        jPanel1.add(selectCompany);
        selectCompany.setBounds(207, 127, 320, 40);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("» COMPAÑIA");
        jLabel1.setToolTipText("");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(76, 135, 113, 24);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("» ESTADO");
        jLabel2.setToolTipText("");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(80, 183, 90, 24);

        selectState.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        selectState.setMaximumRowCount(4);
        selectState.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "• NUEVO", "• SEMINUEVO", "• USADO", " " }));
        selectState.setEnabled(false);
        selectState.setPreferredSize(new java.awt.Dimension(220, 40));
        selectState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectStateActionPerformed(evt);
            }
        });
        jPanel1.add(selectState);
        selectState.setBounds(207, 175, 320, 40);

        selectModel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        selectModel.setMaximumRowCount(4);
        selectModel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar" }));
        selectModel.setEnabled(false);
        selectModel.setPreferredSize(new java.awt.Dimension(220, 40));
        selectModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectModelActionPerformed(evt);
            }
        });
        jPanel1.add(selectModel);
        selectModel.setBounds(207, 221, 320, 40);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("» MODELO");
        jLabel3.setToolTipText("");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(76, 229, 94, 24);

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("» N! SERIE");
        jLabel10.setToolTipText("");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(78, 275, 92, 24);

        selectSerial.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        selectSerial.setMaximumRowCount(4);
        selectSerial.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar" }));
        selectSerial.setEnabled(false);
        selectSerial.setPreferredSize(new java.awt.Dimension(220, 40));
        selectSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSerialActionPerformed(evt);
            }
        });
        jPanel1.add(selectSerial);
        selectSerial.setBounds(207, 267, 320, 40);

        selectColors.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        selectColors.setMaximumRowCount(4);
        selectColors.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar" }));
        selectColors.setEnabled(false);
        selectColors.setPreferredSize(new java.awt.Dimension(220, 40));
        selectColors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectColorsActionPerformed(evt);
            }
        });
        jPanel1.add(selectColors);
        selectColors.setBounds(207, 313, 320, 40);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("» COLORES");
        jLabel4.setToolTipText("");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(78, 321, 104, 24);

        selectColorsNew.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        selectColorsNew.setMaximumRowCount(4);
        selectColorsNew.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "• BLANCO", "• ROJO", "• NARANJA", "• AMARILLO", "• VERDE", "• AZUL", "• GRIS" }));
        selectColorsNew.setEnabled(false);
        selectColorsNew.setPreferredSize(new java.awt.Dimension(220, 40));
        selectColorsNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectColorsNewActionPerformed(evt);
            }
        });
        jPanel1.add(selectColorsNew);
        selectColorsNew.setBounds(207, 359, 320, 40);

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("PRECIO:        $");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(716, 459, 167, 32);

        txtPriceCar.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        txtPriceCar.setForeground(new java.awt.Color(255, 255, 255));
        txtPriceCar.setText("-----------");
        jPanel1.add(txtPriceCar);
        txtPriceCar.setBounds(889, 459, 250, 32);

        txtExtra.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        txtExtra.setForeground(new java.awt.Color(255, 255, 255));
        txtExtra.setText("-----------");
        jPanel1.add(txtExtra);
        txtExtra.setBounds(889, 499, 250, 32);

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("ADICIONES:  $");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(716, 497, 167, 32);

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("TOTAL:         $");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(719, 539, 167, 32);

        txtPriceTotal.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        txtPriceTotal.setForeground(new java.awt.Color(255, 255, 255));
        txtPriceTotal.setText("-----------");
        jPanel1.add(txtPriceTotal);
        txtPriceTotal.setBounds(889, 539, 250, 32);

        iconCar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/car.png"))); // NOI18N
        jPanel1.add(iconCar);
        iconCar.setBounds(596, 127, 575, 253);

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("► SELECCIONA LOS SIGUIENTES DATOS  ◄");
        jLabel5.setToolTipText("");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(108, 75, 391, 24);

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("» TIPO DE PAGO");
        jLabel11.setToolTipText("");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(78, 428, 145, 24);

        selectTypePayment.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        selectTypePayment.setMaximumRowCount(4);
        selectTypePayment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "• TARJETA", "• PAYPAL" }));
        selectTypePayment.setEnabled(false);
        selectTypePayment.setPreferredSize(new java.awt.Dimension(220, 40));
        selectTypePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectTypePaymentActionPerformed(evt);
            }
        });
        jPanel1.add(selectTypePayment);
        selectTypePayment.setBounds(235, 420, 284, 40);

        typePaymentPanel.setBackground(new java.awt.Color(128, 153, 155));
        typePaymentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        typePaymentPanel.setEnabled(false);

        txtCard.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtCard.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCard.setPreferredSize(new java.awt.Dimension(73, 34));
        txtCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCardActionPerformed(evt);
            }
        });
        txtCard.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCardKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCardKeyTyped(evt);
            }
        });

        labelCar.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        labelCar.setForeground(new java.awt.Color(255, 255, 255));
        labelCar.setText("» N° TARJETA");
        labelCar.setToolTipText("");

        txtCVV.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtCVV.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCVV.setPreferredSize(new java.awt.Dimension(73, 34));
        txtCVV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCVVKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCVVKeyTyped(evt);
            }
        });

        labelCVV.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        labelCVV.setForeground(new java.awt.Color(255, 255, 255));
        labelCVV.setText("» CVV");
        labelCVV.setToolTipText("");

        labelMM.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        labelMM.setForeground(new java.awt.Color(255, 255, 255));
        labelMM.setText("» MES");
        labelMM.setToolTipText("");

        labelAA.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        labelAA.setForeground(new java.awt.Color(255, 255, 255));
        labelAA.setText("» AÑO");
        labelAA.setToolTipText("");

        txtMM.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtMM.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtMM.setPreferredSize(new java.awt.Dimension(73, 34));
        txtMM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMMActionPerformed(evt);
            }
        });
        txtMM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMMKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMMKeyTyped(evt);
            }
        });

        txtAA.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtAA.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtAA.setPreferredSize(new java.awt.Dimension(73, 34));
        txtAA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAAActionPerformed(evt);
            }
        });
        txtAA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAAKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAAKeyTyped(evt);
            }
        });

        txtPaypalEmail.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtPaypalEmail.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPaypalEmail.setPreferredSize(new java.awt.Dimension(73, 34));
        txtPaypalEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPaypalEmailKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPaypalEmailKeyTyped(evt);
            }
        });

        labelPaypalEmail.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        labelPaypalEmail.setForeground(new java.awt.Color(255, 255, 255));
        labelPaypalEmail.setText("» CORREO");
        labelPaypalEmail.setToolTipText("");

        labelPaypalPass.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        labelPaypalPass.setForeground(new java.awt.Color(255, 255, 255));
        labelPaypalPass.setText("» CONTRASEÑA");
        labelPaypalPass.setToolTipText("");

        txtPaypalPass.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtPaypalPass.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPaypalPass.setPreferredSize(new java.awt.Dimension(73, 34));
        txtPaypalPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPaypalPassKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPaypalPassKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout typePaymentPanelLayout = new javax.swing.GroupLayout(typePaymentPanel);
        typePaymentPanel.setLayout(typePaymentPanelLayout);
        typePaymentPanelLayout.setHorizontalGroup(
            typePaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(typePaymentPanelLayout.createSequentialGroup()
                .addGroup(typePaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(typePaymentPanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(typePaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(typePaymentPanelLayout.createSequentialGroup()
                                .addComponent(labelCVV)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCVV, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                            .addComponent(labelCar, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(typePaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtCard, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(typePaymentPanelLayout.createSequentialGroup()
                                .addComponent(labelMM)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtMM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelAA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtAA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(typePaymentPanelLayout.createSequentialGroup()
                        .addGroup(typePaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(typePaymentPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(labelPaypalPass))
                            .addGroup(typePaymentPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelPaypalEmail)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(typePaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtPaypalEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                            .addComponent(txtPaypalPass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        typePaymentPanelLayout.setVerticalGroup(
            typePaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(typePaymentPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(typePaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCar)
                    .addComponent(txtCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(typePaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCVV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelCVV)
                    .addComponent(txtMM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelMM)
                    .addComponent(labelAA))
                .addGap(27, 27, 27)
                .addGroup(typePaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPaypalEmail)
                    .addComponent(txtPaypalEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(typePaymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPaypalPass)
                    .addComponent(txtPaypalPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jPanel1.add(typePaymentPanel);
        typePaymentPanel.setBounds(67, 472, 476, 228);

        btnPurchase.setBackground(new java.awt.Color(255, 255, 255));
        btnPurchase.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        btnPurchase.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/ready-off.png"))); // NOI18N
        btnPurchase.setText("COMPRAR");
        btnPurchase.setEnabled(false);
        btnPurchase.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/ready-on.png"))); // NOI18N
        btnPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPurchaseActionPerformed(evt);
            }
        });
        jPanel1.add(btnPurchase);
        btnPurchase.setBounds(700, 600, 340, 80);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        MenuUser.ReloadData = false;
        this.setVisible(false);
        MenuUser menu = new MenuUser();
        menu.setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel7MouseClicked

    private void selectCompanyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectCompanyActionPerformed
        if(MenuUser.ReloadData){
            load();
        } else {
            if (selectCompany.getSelectedIndex() > 0) {
                selectState.setEnabled(true);
                selectState.setSelectedIndex(0);
                iconCar.setIcon(car);
                txtPriceCar.setText("-----------");
                txtExtra.setText("-----------");
                txtPriceTotal.setText("-----------");
                switch(selectCompany.getSelectedIndex()){
                    case 1:
                    iconCar.setIcon(nissanWhite);
                    break;
                    case 2:
                    iconCar.setIcon(audiWhite);
                    break;
                    case 3:
                    iconCar.setIcon(volkswagenWhite);
                    break;
                }
            } else {
                clear();
            }
        }
    }//GEN-LAST:event_selectCompanyActionPerformed

    private void selectStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectStateActionPerformed
        if(MenuUser.ReloadData){
            load();
        } else {
        if (selectState.getSelectedIndex() > 0) {
            selectModel.setEnabled(true);
            selectSerial.setEnabled(false);
            selectSerial.setSelectedIndex(0);
            txtPriceCar.setText("-----------");
            txtExtra.setText("-----------");
            txtPriceTotal.setText("-----------");
            switch(selectCompany.getSelectedIndex()){
                case 1:
                iconCar.setIcon(nissanWhite);
                break;
                case 2:
                iconCar.setIcon(audiWhite);
                break;
                case 3:
                iconCar.setIcon(volkswagenWhite);
                break;
            }
            selectModel.setModel(methodsSql.loadModels(selectCompany.getSelectedIndex(), selectState.getSelectedIndex()));
        } else {
            iconCar.setIcon(car);
            selectModel.setEnabled(false);
            selectSerial.setEnabled(false);
            selectColors.setEnabled(false);
            selectModel.setSelectedIndex(0);
            selectSerial.setSelectedIndex(0);
            selectColors.setSelectedIndex(0);
        }}
    }//GEN-LAST:event_selectStateActionPerformed

    private void selectModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectModelActionPerformed
        if(MenuUser.ReloadData){
            load();
        } else {
        if (selectModel.getSelectedIndex() > 0) {
            selectSerial.setEnabled(true);
            String txtmodel = selectModel.getSelectedItem().toString();
            String model = txtmodel.substring(2);
            selectSerial.setModel(methodsSql.loadSerial(model));
            txtPriceCar.setText("-----------");
            txtExtra.setText("-----------");
            txtPriceTotal.setText("-----------");
        } else {
            selectSerial.setEnabled(false);
            selectColors.setEnabled(false);
            selectSerial.setSelectedIndex(0);
            selectColors.setSelectedIndex(0);
        }}
    }//GEN-LAST:event_selectModelActionPerformed

    private void selectSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSerialActionPerformed
        if(MenuUser.ReloadData){
            load();
        } else {
            if (selectSerial.getSelectedIndex() > 0) {
                selectColors.setEnabled(true);
                String txt = selectSerial.getSelectedItem().toString();
                String txtmodel = txt.substring(2);
                int model = Integer.parseInt(txtmodel);
                selectColors.setModel(methodsSql.loadColorsQuotation(model));
                String s = moneyFormat(methodsSql.loadPriceCar(model));
                txtPriceCar.setText(s);
                if(!selectColorsNew.isEnabled()){
                    txtPriceTotal.setText(s);
                }

            } else {
                selectColors.setEnabled(false);
                selectColors.setSelectedIndex(0);
            }
        }
    }//GEN-LAST:event_selectSerialActionPerformed

    private void selectColorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectColorsActionPerformed
        if(MenuUser.ReloadData){
            load();
        } else {
            String txtcompany = selectCompany.getSelectedItem().toString();
            String company = txtcompany.substring(2);
            String txtcolor = selectColors.getSelectedItem().toString();
            String color = txtcolor.substring(2);
            switch(company){
                case "NISSAN":
                switch(color){
                    case "BLANCO":
                    iconCar.setIcon(nissanWhite);
                    break;
                    case "ROJO":
                    iconCar.setIcon(nissanRed);
                    break;
                    case "NARANJA":
                    iconCar.setIcon(nissanOrange);
                    break;
                    case "AMARILLO":
                    iconCar.setIcon(nissanYellow);
                    break;
                    case "VERDE":
                    iconCar.setIcon(nissanGreen);
                    break;
                    case "AZUL":
                    iconCar.setIcon(nissanBlue);
                    break;
                    case "GRIS":
                    iconCar.setIcon(nissanGray);
                    break;
                }
                break;
                case "AUDI":
                switch(color){
                    case "BLANCO":
                    iconCar.setIcon(audiWhite);
                    break;
                    case "ROJO":
                    iconCar.setIcon(audiRed);
                    break;
                    case "NARANJA":
                    iconCar.setIcon(audiOrange);
                    break;
                    case "AMARILLO":
                    iconCar.setIcon(audiYellow);
                    break;
                    case "VERDE":
                    iconCar.setIcon(audiGreen);
                    break;
                    case "AZUL":
                    iconCar.setIcon(audiBlue);
                    break;
                    case "GRIS":
                    iconCar.setIcon(audiGray);
                    break;
                }
                break;
                case "VOLKSWAGEN":
                switch(color){
                    case "BLANCO":
                    iconCar.setIcon(volkswagenWhite);
                    break;
                    case "ROJO":
                    iconCar.setIcon(volkswagenRed);
                    break;
                    case "NARANJA":
                    iconCar.setIcon(volkswagenOrange);
                    break;
                    case "AMARILLO":
                    iconCar.setIcon(volkswagenYellow);
                    break;
                    case "VERDE":
                    iconCar.setIcon(volkswagenGreen);
                    break;
                    case "AZUL":
                    iconCar.setIcon(volkswagenBlue);
                    break;
                    case "GRIS":
                    iconCar.setIcon(volkswagenGray);
                    break;
                }
                break;
            }
            if(!selectColors.getSelectedItem().equals("Seleccionar") &&
               !selectColors.getSelectedItem().equals("• Otro: ")){
                    selectTypePayment.setEnabled(true);
            } else {
                    selectTypePayment.setSelectedIndex(0);
                    selectTypePayment.setEnabled(false);
            }
        if(selectColors.getSelectedItem().equals("• Otro: ")){
            selectColorsNew.setVisible(true);
            selectColorsNew.setEnabled(true);
            selectColorsNew.setSelectedIndex(0);
            switch(selectCompany.getSelectedIndex()){
                case 1:
                iconCar.setIcon(nissanWhite);
                break;
                case 2:
                iconCar.setIcon(audiWhite);
                break;
                case 3:
                iconCar.setIcon(volkswagenWhite);
                break;
            }
        } else {
            selectColorsNew.setSelectedIndex(0);
            selectColorsNew.setVisible(false);
        }
            
        }
    }//GEN-LAST:event_selectColorsActionPerformed

    private void selectTypePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectTypePaymentActionPerformed
        switch(selectTypePayment.getSelectedIndex()){
            case 1:
                txtCard.setEnabled(true);
                txtCVV.setEnabled(true);
                txtMM.setEnabled(true);
                txtAA.setEnabled(true);
                labelCar.setEnabled(true);
                labelCVV.setEnabled(true);
                labelMM.setEnabled(true);
                labelAA.setEnabled(true);
                
                txtPaypalEmail.setEnabled(false);
                txtPaypalPass.setEnabled(false);
                labelPaypalEmail.setEnabled(false);
                labelPaypalPass.setEnabled(false);
                txtPaypalEmail.setText(null);
                txtPaypalPass.setText(null);
                
                break;
            case 2:
                txtPaypalEmail.setEnabled(true);
                txtPaypalPass.setEnabled(true);
                labelPaypalEmail.setEnabled(true);
                labelPaypalPass.setEnabled(true);
                
                txtCard.setEnabled(false);
                txtCVV.setEnabled(false);
                txtMM.setEnabled(false);
                txtAA.setEnabled(false);
                labelCar.setEnabled(false);
                labelCVV.setEnabled(false);
                labelMM.setEnabled(false);
                labelAA.setEnabled(false);
                txtCard.setText(null);
                txtCVV.setText(null);
                txtMM.setText(null);
                txtAA.setText(null);
                break;
            default:
                lockTypePaymentPanel();
                break;
        }
        btnPurchase.setEnabled(false);
    }//GEN-LAST:event_selectTypePaymentActionPerformed

    private void txtMMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMMActionPerformed

    private void txtAAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAAActionPerformed

    private void btnPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPurchaseActionPerformed
        int i = JOptionPane.showConfirmDialog(
                null, "CONFIRME PORFAVOR SU COMPRA PARA PROCESAR EL PAGO!",
                "¡ALERTA!", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(i == 0){
            int id = Login.userEntity.getId();
            int folio = (int) (Math.random()*1500+1000);
            String name = Login.userEntity.getName();
            String model, additional = null;
            int serial_number;
            if(MenuUser.ReloadData){
                model = selectModel.getSelectedItem().toString();
                serial_number = Integer.parseInt(selectSerial.getSelectedItem().toString());
            } else {
                String txtmodel = selectModel.getSelectedItem().toString();
                String txttmodel = txtmodel.substring(2);
                model = txttmodel;
                String txtserial = selectSerial.getSelectedItem().toString();
                String txttserial = txtserial.substring(2);
                serial_number = Integer.parseInt(txttserial);
            }
            int price_car = methodsSql.loadPriceCar(serial_number);
            if(selectColorsNew.isEnabled()){ 
                additional = "YES"; 
            } else { 
                additional = "NOT"; 
            }
            int price_additional = price;
            int price_total = price_car + price_additional;
            int type_payment = selectTypePayment.getSelectedIndex();
            methodsSql.Purchase(id, folio, name, model, serial_number, price_car, additional, price_additional, price_total, type_payment);
//            methodsSql.DeleteCarPurchase(serial_number);
            validateRecive();
        }
    }//GEN-LAST:event_btnPurchaseActionPerformed

    private void selectColorsNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectColorsNewActionPerformed
        if(MenuUser.ReloadData){
            load();
        } else {
            if(selectColorsNew.isEnabled()){
                String txtcompany = selectCompany.getSelectedItem().toString();
                String company = txtcompany.substring(2);
                String txtcolor = selectColorsNew.getSelectedItem().toString();
                String color = txtcolor.substring(2);
                switch(company){
                    case "NISSAN":
                    switch(color){
                        case "BLANCO":
                        price = 15000;
                        iconCar.setIcon(nissanWhite);
                        break;
                        case "ROJO":
                        price = 10000;
                        iconCar.setIcon(nissanRed);
                        break;
                        case "NARANJA":
                        price = 5000;
                        iconCar.setIcon(nissanOrange);
                        break;
                        case "AMARILLO":
                        price = 8000;
                        iconCar.setIcon(nissanYellow);
                        break;
                        case "VERDE":
                        price = 9000;
                        iconCar.setIcon(nissanGreen);
                        break;
                        case "AZUL":
                        price = 12000;
                        iconCar.setIcon(nissanBlue);
                        break;
                        case "GRIS":
                        price = 13000;
                        iconCar.setIcon(nissanGray);
                        break;
                    }
                    break;
                    case "AUDI":
                    switch(color){
                        case "BLANCO":
                        price = 15000;
                        iconCar.setIcon(audiWhite);
                        break;
                        case "ROJO":
                        price = 10000;
                        iconCar.setIcon(audiRed);
                        break;
                        case "NARANJA":
                        price = 5000;
                        iconCar.setIcon(audiOrange);
                        break;
                        case "AMARILLO":
                        price = 8000;
                        iconCar.setIcon(audiYellow);
                        break;
                        case "VERDE":
                        price = 9000;
                        iconCar.setIcon(audiGreen);
                        break;
                        case "AZUL":
                        price = 12000;
                        iconCar.setIcon(audiBlue);
                        break;
                        case "GRIS":
                        price = 13000;
                        iconCar.setIcon(audiGray);
                        break;
                    }
                    break;
                    case "VOLKSWAGEN":
                    switch(color){
                        case "BLANCO":
                        price = 15000;
                        iconCar.setIcon(volkswagenWhite);
                        break;
                        case "ROJO":
                        price = 10000;
                        iconCar.setIcon(volkswagenRed);
                        break;
                        case "NARANJA":
                        price = 5000;
                        iconCar.setIcon(volkswagenOrange);
                        break;
                        case "AMARILLO":
                        price = 8000;
                        iconCar.setIcon(volkswagenYellow);
                        break;
                        case "VERDE":
                        price = 9000;
                        iconCar.setIcon(volkswagenGreen);
                        break;
                        case "AZUL":
                        price = 12000;
                        iconCar.setIcon(volkswagenBlue);
                        break;
                        case "GRIS":
                        price = 13000;
                        iconCar.setIcon(volkswagenGray);
                        break;
                    }
                    break;
                }
                    String s = moneyFormat(price);
                    txtExtra.setText(s);
                    String txt = selectSerial.getSelectedItem().toString();
                    String txtmodel = txt.substring(2);
                    int model = Integer.parseInt(txtmodel);
                    int extra = methodsSql.loadPriceCar(model);
                    int price_total = price + extra;
                    txtPriceTotal.setText(moneyFormat(price_total));
                    if(!selectColorsNew.getSelectedItem().equals("Seleccionar")){
                        selectTypePayment.setEnabled(true);
                    } else {
                        selectTypePayment.setEnabled(false);
                        selectTypePayment.setSelectedIndex(0);
                    }
            }
        }
    }//GEN-LAST:event_selectColorsNewActionPerformed

    private void txtCardKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCardKeyTyped
        char num = evt.getKeyChar();
        if(num<48 || num>57) evt.consume();
        if(txtCard.getText().length()>=16) evt.consume();
    }//GEN-LAST:event_txtCardKeyTyped

    private void txtCVVKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCVVKeyTyped
        char num = evt.getKeyChar();
        if(num<48 || num>57) evt.consume();
        if(txtCVV.getText().length()>=3) evt.consume();
    }//GEN-LAST:event_txtCVVKeyTyped

    private void txtMMKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMMKeyTyped
        char num = evt.getKeyChar();
        if(num<48 || num>57) evt.consume();
        if(txtMM.getText().length()>=2) evt.consume();
    }//GEN-LAST:event_txtMMKeyTyped

    private void txtAAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAAKeyTyped
        char num = evt.getKeyChar();
        if(num<48 || num>57) evt.consume();
        if(txtAA.getText().length()>=2) evt.consume();
    }//GEN-LAST:event_txtAAKeyTyped

    private void txtPaypalPassKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPaypalPassKeyTyped
        char c = evt.getKeyChar();
        if((c<48 || c>57) && (c<65 || c>90) && (c<97 || c>122)) { 
            evt.consume(); }
        if(txtPaypalPass.getText().length()>=30) evt.consume();   
    }//GEN-LAST:event_txtPaypalPassKeyTyped

    private void txtPaypalEmailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPaypalEmailKeyTyped
        int c = evt.getKeyChar();
        if((c<48 || c>57) && (c<64 || c>90) && 
           (c<97 || c>122) && (c!=45) && (c!=46) &&
           (c!=95)){ evt.consume(); } 
        if(txtPaypalEmail.getText().length()>=30) evt.consume();   
    }//GEN-LAST:event_txtPaypalEmailKeyTyped

    private void txtCardKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCardKeyReleased
        if(txtCard.getText().length() == 16){ checkCar1 = true;
        } else { checkCar1 = false; }
        btnValidateCard();
    }//GEN-LAST:event_txtCardKeyReleased

    private void txtCVVKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCVVKeyReleased
        if(txtCVV.getText().length() == 3){ checkCar2 = true;
        } else { checkCar2 = false; }
        btnValidateCard();
    }//GEN-LAST:event_txtCVVKeyReleased

    private void txtMMKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMMKeyReleased
        if(txtMM.getText().length() == 2){ checkCar3 = true;  
        } else { checkCar3 = false; }
        btnValidateCard();
    }//GEN-LAST:event_txtMMKeyReleased

    private void txtAAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAAKeyReleased
        if(txtAA.getText().length() == 2){ checkCar4 = true;
        } else { checkCar4 = false; }
        btnValidateCard();
    }//GEN-LAST:event_txtAAKeyReleased

    private void txtPaypalEmailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPaypalEmailKeyReleased
        checkPay1 = isEmail(txtPaypalEmail.getText());
        btnValidatePaypal();
    }//GEN-LAST:event_txtPaypalEmailKeyReleased

    private void txtPaypalPassKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPaypalPassKeyReleased
        if(txtPaypalPass.getText().length() > 8){ checkPay2 = true;
        } else { checkPay2 = false; }
        btnValidatePaypal();     
    }//GEN-LAST:event_txtPaypalPassKeyReleased

    private void txtCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCardActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCardActionPerformed

    private String moneyFormat(int i){ 
        DecimalFormat money = new DecimalFormat("###,###,###"); 
        String s = money.format(i);
        return s;
    }
    
    private void clear(){
        selectState.setEnabled(false);
        selectModel.setEnabled(false);
        selectColors.setEnabled(false);
        selectColorsNew.setEnabled(false);
        selectSerial.setEnabled(false);
        selectTypePayment.setEnabled(false);
        selectState.setSelectedIndex(0);
        selectModel.setSelectedIndex(0);
        selectSerial.setSelectedIndex(0);
        selectColors.setSelectedIndex(0);
        selectColorsNew.setSelectedIndex(0);
        selectTypePayment.setSelectedIndex(0);
        iconCar.setIcon(car);
    }
    
    private void load(){
        selectCompany.setEnabled(true);
        String txtCompany = Quotation.selectCompany.getSelectedItem().toString();
        String txttCompany = txtCompany.substring(2);
        DefaultComboBoxModel company = new DefaultComboBoxModel();
        company.addElement(txttCompany);
        selectCompany.setModel(company);
        switch(selectCompany.getSelectedItem().toString()){
            case "NISSAN":
            iconCar.setIcon(nissanWhite);
            break;
            case "AUDI":
            iconCar.setIcon(audiWhite);
            break;
            case "VOLKSWAGEN":
            iconCar.setIcon(volkswagenWhite);
            break;
        }
        selectState.setEnabled(true);
        String txtState = Quotation.selectState.getSelectedItem().toString();
        String txttState = txtState.substring(2);
        DefaultComboBoxModel state = new DefaultComboBoxModel();
        state.addElement(txttState);
        selectState.setModel(state);
        
        selectModel.setEnabled(true);
        String txtModel = Quotation.selectModel.getSelectedItem().toString();
        String txttModel = txtModel.substring(2);
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.addElement(txttModel);
        selectModel.setModel(model);
        
        selectSerial.setEnabled(true);
        String txtSerial = Quotation.selectSerial.getSelectedItem().toString();
        String txttSerial = txtSerial.substring(2);
        DefaultComboBoxModel serial = new DefaultComboBoxModel();
        serial.addElement(txttSerial);
        selectSerial.setModel(serial);
        
        if(Quotation.selectColors.getSelectedItem().equals("• Otro: ")){
            selectColors.setEnabled(true);
            String txtColors = Quotation.selectColorsNew.getSelectedItem().toString();
            String txttColors = txtColors.substring(2);
            DefaultComboBoxModel colors = new DefaultComboBoxModel();
            colors.addElement(txttColors);
            selectColors.setModel(colors);
        } else {
            selectColors.setEnabled(true);
            String txtColors = Quotation.selectColors.getSelectedItem().toString();
            String txttColors = txtColors.substring(2);
            DefaultComboBoxModel colors = new DefaultComboBoxModel();
            colors.addElement(txttColors);
            selectColors.setModel(colors);
        }
        switch(selectCompany.getSelectedItem().toString()){
            case "NISSAN":
            switch(selectColors.getSelectedItem().toString()){
                case "BLANCO":
                iconCar.setIcon(nissanWhite);
                break;
                case "ROJO":
                iconCar.setIcon(nissanRed);
                break;
                case "NARANJA":
                iconCar.setIcon(nissanOrange);
                break;
                case "AMARILLO":
                iconCar.setIcon(nissanYellow);
                break;
                case "VERDE":
                iconCar.setIcon(nissanGreen);
                break;
                case "AZUL":
                iconCar.setIcon(nissanBlue);
                break;
                case "GRIS":
                iconCar.setIcon(nissanGray);
                break;
            }
            break;
            case "AUDI":
            switch(selectColors.getSelectedItem().toString()){
                case "BLANCO":
                iconCar.setIcon(audiWhite);
                break;
                case "ROJO":
                iconCar.setIcon(audiRed);
                break;
                case "NARANJA":
                iconCar.setIcon(audiOrange);
                break;
                case "AMARILLO":
                iconCar.setIcon(audiYellow);
                break;
                case "VERDE":
                iconCar.setIcon(audiGreen);
                break;
                case "AZUL":
                iconCar.setIcon(audiBlue);
                break;
                case "GRIS":
                iconCar.setIcon(audiGray);
                break;
            }
            break;
            case "VOLKSWAGEN":
            switch(selectColors.getSelectedItem().toString()){
                case "BLANCO":
                iconCar.setIcon(volkswagenWhite);
                break;
                case "ROJO":
                iconCar.setIcon(volkswagenRed);
                break;
                case "NARANJA":
                iconCar.setIcon(volkswagenOrange);
                break;
                case "AMARILLO":
                iconCar.setIcon(volkswagenYellow);
                break;
                case "VERDE":
                iconCar.setIcon(volkswagenGreen);
                break;
                case "AZUL":
                iconCar.setIcon(volkswagenBlue);
                break;
                case "GRIS":
                iconCar.setIcon(volkswagenGray);
                break;
            }
            break;
        }
        selectColorsNew.setVisible(false);
        selectTypePayment.setEnabled(true);
        txtPriceCar.setText(Quotation.txtPriceCar.getText());
        txtExtra.setText(Quotation.txtExtra.getText());
        txtPriceTotal.setText(Quotation.txtPriceTotal.getText());
    }
    
    public void lockTypePaymentPanel(){
        for(Component a: typePaymentPanel.getComponents()){
            a.setEnabled(false);
        }
    }
    
    public void btnValidateCard(){
        if(txtCard.getText().equals("") || txtCVV.getText().equals("") ||
           txtMM.getText() .equals("") || txtAA.getText() .equals("")){
                btnPurchase.setEnabled(false);
        } else {
            if(checkCar1 == true && checkCar2 == true && checkCar3 == true && checkCar4 == true){
                btnPurchase.setEnabled(true);
            }
        }
    }
    
    public void btnValidatePaypal(){
        if(txtPaypalEmail.getText().equals("") || txtPaypalPass.getText().equals("")){
                btnPurchase.setEnabled(false);
        } else {
            if(checkPay1 == true && checkPay2 == true){
                btnPurchase.setEnabled(true);
            }
        }
    }
    
    public boolean isEmail(String correo) {
        Pattern pattern = Pattern.compile("^([0-9a-zA-Z]([_.w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-w]*[0-9a-zA-Z].)+([a-zA-Z]{2,9}.)+[a-zA-Z]{2,3})$");
        Matcher mather = pattern.matcher(correo);
        if (mather.find()) {
            return true;
        }else{
            return false;
        }        
    }
    
    public void validateRecive(){
        int i = JOptionPane.showConfirmDialog(
                null, "¿DESEAS GENERAR UNA FACTURA? \n\t SE CREARA UNA FACTURA PDF Y AL CORREO REGISTRADO",
                "", JOptionPane.YES_NO_OPTION, JOptionPane.DEFAULT_OPTION);
        if(i==0){
            String url = null;
            JFileChooser loadUrlFile1 = new JFileChooser();
            int o = loadUrlFile1.showSaveDialog(this);
            if(o== JFileChooser.APPROVE_OPTION){
                File fileUrl = loadUrlFile1.getSelectedFile();
                url = fileUrl.toString();
            }
            file.pdfCreateFile(url, txtPriceCar.getText(), txtExtra.getText(), txtPriceTotal.getText(), i);
            pdfSendEmail(url, Login.userEntity.getEmail());
        }
    }
    
    public void pdfSendEmail(String url, String receiver){
        try{
            Properties props = new Properties();
            props.put("mail.smtp.host", "smtp.gmail.com");
            props.setProperty("mail.smtp.starttls.enable", "true");
            props.setProperty("mail.smtp.port", "587");
            props.setProperty("mail.smtp.user", "admicaragency01");
            props.setProperty("mail.smtp.auth", "true");

            Session session = Session.getDefaultInstance(props, null);

            BodyPart texto = new MimeBodyPart();
            texto.setText("Gracias por comprar en Car Agency :D");

            BodyPart adjunto = new MimeBodyPart();
            adjunto.setDataHandler(
                new DataHandler(new FileDataSource(url+".pdf")));
            adjunto.setFileName("Factura.pdf");

            MimeMultipart multiParte = new MimeMultipart();
            multiParte.addBodyPart(texto);
            multiParte.addBodyPart(adjunto);

            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress("prueba@prueba.com"));
            message.addRecipient(
                Message.RecipientType.TO,
                new InternetAddress(receiver));
            message.setSubject("FACTURA - CAR AGENCY");
            message.setContent(multiParte);

            Transport t = session.getTransport("smtp");
            t.connect("admicaragency01@gmail.com", "contr@@10");
            t.sendMessage(message, message.getAllRecipients());
            t.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Purchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Purchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Purchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Purchase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Purchase().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPurchase;
    private javax.swing.JLabel iconCar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelAA;
    private javax.swing.JLabel labelCVV;
    private javax.swing.JLabel labelCar;
    private javax.swing.JLabel labelMM;
    private javax.swing.JLabel labelPaypalEmail;
    private javax.swing.JLabel labelPaypalPass;
    public static javax.swing.JComboBox<String> selectColors;
    public static javax.swing.JComboBox<String> selectColorsNew;
    public static javax.swing.JComboBox<String> selectCompany;
    public static javax.swing.JComboBox<String> selectModel;
    public static javax.swing.JComboBox<String> selectSerial;
    public static javax.swing.JComboBox<String> selectState;
    public static javax.swing.JComboBox<String> selectTypePayment;
    private javax.swing.JTextField txtAA;
    private javax.swing.JTextField txtCVV;
    private javax.swing.JTextField txtCard;
    private javax.swing.JLabel txtExtra;
    private javax.swing.JTextField txtMM;
    private javax.swing.JTextField txtPaypalEmail;
    private javax.swing.JPasswordField txtPaypalPass;
    private javax.swing.JLabel txtPriceCar;
    private javax.swing.JLabel txtPriceTotal;
    private javax.swing.JPanel typePaymentPanel;
    // End of variables declaration//GEN-END:variables
}
